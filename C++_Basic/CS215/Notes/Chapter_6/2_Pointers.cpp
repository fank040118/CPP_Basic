#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

int main(){
    /*
    指针(Pointer)是用于储存内存中其他变量地址的特殊变量假设内存中
    有许多储存单元，每个储存单元有8位宽，即8bit，也为1字节(1 Byte)
    每个储存单元都存有实际的二进制数据，作为实际对象的数据
    那么每个储存单元都有自己独自的内存地址，如(0x00007FFF8E3...)。
    内存地址与储存单元相对应，直接指向其储存的数据

    那么指针(Pointer)就是一个储存数据对象在内存中地址的变量

    指针有许多用处，比如指针可以用来传递函数参数和返回值，使得传递
    变得类似于 引用传递Call by reference
    同时，由于指针直接访问变量的内存地址，所以它可以无视部分C++的
    规则和限制
    */
    
    // 在C++中，指针的创建语法为 类型* 变量名，也就是说，指针和普通
    // 变量创建的最大区别是它需要在类型声明后加上 *
    // 指针虽然是储存对象的内存地址的变量，但指针所指向的变量却是存在
    // 类型的，所以指针在创建时也需要包含类型，int* 指向int变量
    int  *ip;
    float *fp;
    
    // 若创建时同时声明了多个变量，那么不加上 * 的变量都不会是指针
    // 比如此处的 q 并未加上 *，所以它只是一个普通的int变量
    int* p, q, * r;

    int userNum_1 = 55;
    // 地址操作符 & 用于获取变量的内存地址，此处将userNum_1的内存地址
    // 赋给指针ip，此时，ip的值就是userNum_1的地址，但这不代表ip与
    // 其相关联，这更类似于 按值引用 ，ip的值是它的内存地址，但修改ip
    // 并不会导致后者的内存地址发生变化
    ip = & userNum_1;
    cout << ip << endl;

    

    return 0;
}