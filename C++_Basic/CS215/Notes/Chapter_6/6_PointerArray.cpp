#include <string>
#include <iostream>

using namespace std;

void arrayFunc(int []);
int main(){
    // 数组Array的数组名实际上一个指针，它指向数组的第一个元素
    // 数组元素的下标表示偏移量，例如a[n]等价于*(a+n)
    // 数组的数组名是一个指向数组第一元素的指针，比如a指向a[0]
    // 给这个指针加上偏移量就可以访问数组中的其他元素，比如
    // 偏移1个元素就变为访问a[1]，这就是为什么可以使用for循环
    // 逐个遍历数组元素，因为它在使用不断变化的i作为指针偏移量

    // 例如这就是创建了一个数组，数组名a是一个指向int类的指针
    // a[0]就是数组的第一个元素，数组名a指向了它
    int a[4];
    // 所以，当我们直接输出这个数组的数组名时，实际上是在输出它的
    // 内存地址，因为数组名是数组的指针，储存了数组第一个元素的地址
    cout << a << endl;
    // 当我们给数组的某一个地方赋值时，实际上就是使用指针指向
    // 特定位置后赋值
    // 比如a[2]代表为 指针a偏移2个int类型的大小的储存单元
    // 随后为指针指向处赋值 7
    a[2] = 7;
    

    // 假设定义了一个整数数组userArray，大小为3，初始值为{3,1,4}
    // 数组的大小被固定，那么数字将会在内存中分配一块连续的储存
    // 空间，每个元素占用固定的字节数，对于int值，它通常是一个int
    // 占用4个字节(即4x8=32个比特)
    const int arraySize = 3;
    int userArray[arraySize] = {3,1,4};
    // 在这个数组中，总共有3个元素，3，1，4，从二进制上来看，它们
    // 分别是0000 0011，0000 0001，和0000 0100,所以在内存地址上为
    /*
    0000 0011
    ...(三列空值)
    0000 0001
    ...(三列空值)
    0000 0100
    ...(三列空值)*/

    // “数组总是通过按引用传递”实际上是不正确的，因为数组名实际上是数组
    // 的指针，所以当使用数组呼叫函数时，实际上传递的并不是数组或数组的值
    // 而是数组的指针，例如在这里，传递的是数组userArray[]的指针userArray
    // 所以当函数对数组进行修改或调用时，实际上是在通过指针来直接修改数组
    // 的内存地址处的值
    arrayFunc(userArray);
    cout << userArray[2] << endl;

    return 0;
}

void arrayFunc(int a[]){
    a[2] = 99;
}