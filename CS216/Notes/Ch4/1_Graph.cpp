#include <iostream>
#include <string>

using namespace std;

int main(){

    // 图Graph————————————————————————————————————————————————————————————————————
    // 图 是由一组节点，称为 顶点Vertices 和一组链接顶点对的线段，称为 线Line 组成的
    // 特殊结构集合
    //
    // 有向图Directed Graph / Digraph 是一种每条线都又指向其后继节点的方向的图
    // 在 有向图 中，这些有方向的线都称为 弧Arc
    //
    // 无向图Undirected Graph 是一种所有线都没有方向的图
    // 在 无向图 中，这些没有方向的线都称为 边Edges
    //
    // 换句话说，在 有向图 中，每个 节点对 之间不仅有着线链接，线还有指向，比如A和B之间的线
    // 从A指向B
    // 但是在 无向图 中，虽然每个 节点对 之间也有线链接，但这些线没有方向，从A往B看或者从B
    // 往A看并不会让线有“正”或“反”的区别
    
    // 图的结构————————————————————————————————————————————————————————————————————
    // 当两个 顶点 在图中被一条 边 直接链接时，它们被称为 相邻顶点Adjacent Vertices
    // 或 邻居Neighbors
    //    在 无向图 中，只要两个点之间有一条 边 直接连接，就是它们相邻的
    //    在 有向图 中，如果两个点之间有一条 弧 从A指向B，那么A是B的前驱，B是A的后继
    //
    // 路径Path 是一个顶点序列，其中每个顶点都与序列中的下一个顶点相邻
    // 循环Cycle 是一种特殊的路径，它的起点和终点都是同一个顶点
    // 环Loop 是循环的一种特殊情况，其中单个弧起点和终点都是同一个顶点
    //
    // 图的连通性——————————————————————————————————————————————————————————————————
    // 两个顶点之间如果存在一条路径，那么它们就是连通的Connected
    // 一个图如果在忽略方向的情况下(Supressing Direction)，任意两个顶点之间都存在路径
    // 那就成这个图是连通的，但这只是代表连通
    //
    // 一个有向图如果从每个顶点到其他所有顶点之间都存在路径，则称为 强连通Strong Connected
    // 一个有向图如果至少有两个顶点不连通，则称为 弱联通Weakly Connected
    // (标准定义下，弱连通通常指 有向图中所有有向边看作无向边后图变为连通)
    // 
    // 一个不连通的图被称为 不相交的Disjoint
    //
    // 举个例子来说，如果一个图中有ABCDEFG，其中能从A一路走到G，途经所有其他顶点(这些顶点
    // 之间可能有多个链接，比如B又连接C，又连接D)，但是G却是路径上的最后一个点，
    // 也就是说走到G以后就不再有路继续走，那么这个图就是 弱连通
    //
    // 但如果G与A相连，那么图就变为强连通(前提是弧的方向由A朝向G，不然从G无法走出去)，因为
    // 这样的话从任意一顶点(包括G)，都能走到图上任意一个路径
    //
    // 图的边数————————————————————————————————————————————————————————————————————
    // 对于一个 无向图，如果有n个顶点，那么：
    //     若不要求连通，那么最少有0个边，因为可以让所有点之间都孤立
    //     若要求连通，那么最少有n-1个边，相当于将所有点排成一条线后连接相邻的点
    //     在完全图中，每个顶点都能发散n-1个边，以和其余n-1个顶点连接，又总共有n个顶点
    //     所以最多有(n(n-1))/2个边，除以2是因为每个边连接两个点，所以每条边都被额外计算了一次
    //
    // 对于一个 有向图，如果有n个顶点，那么：
    //     若不要求连通，那么最少一样有0个弧
    //     若要求连通，那么最少有n-1个弧，相当于 无向图 的最少连接情况后再加一条弧把末尾和开头连上
    //     在完全图中，每个顶点都能发散n-1个弧，总共有n个顶点，所以最多有n(n-1)个弧，之所以没有
    //     除以2，是因为两个顶点之间需要两条方向相反的弧
    return 0;
}
