#include <iostream>
#include <string>

using namespace std;

int main(){
    
    cout << "=== 图论基础概念(Graph Theory Fundamentals) ===" << endl;
    
    /*
    图(Graph)的定义:
    图是由顶点集合V(Vertices)和边集合E(Edges)组成的数学结构，记为G = (V, E)
    
    基本组成元素:
    - 顶点(Vertex/Node): 图中的基本单元，表示实体或状态
    - 边/弧(Edge/Arc): 连接两个顶点的线段，表示关系或连接
    */
    
    cout << "\n--- 图的分类 ---" << endl;
    
    /*
    1. 有向图(Directed Graph / Digraph):
       - 边具有方向性，用箭头表示
       - 连接线称为"弧(Arc)"
       - 从顶点u到顶点v的弧记为<u,v>或u→v
       - 应用: 网页链接、社交网络关注关系、依赖关系等
    */
    cout << "有向图: 边有方向，如 A → B (A指向B)" << endl;
    
    /*
    2. 无向图(Undirected Graph):
       - 边没有方向性
       - 连接线称为"边(Edge)"
       - 顶点u和v之间的边记为(u,v)或{u,v}
       - 应用: 社交网络好友关系、道路网络、电路连接等
    */
    cout << "无向图: 边无方向，如 A — B (A与B相连)" << endl;
    
    cout << "\n--- 图的基本概念 ---" << endl;
    
    /*
    相邻性(Adjacency):
    - 相邻顶点(Adjacent Vertices): 通过一条边直接连接的两个顶点
    - 邻居(Neighbors): 与某个顶点相邻的所有顶点
    
    在无向图中: 如果存在边(u,v)，则u和v互为邻居
    在有向图中: 如果存在弧<u,v>，则u是v的前驱(predecessor)，v是u的后继(successor)
    */
    cout << "相邻顶点: 直接连接的顶点称为邻居" << endl;
    
    /*
    路径相关概念:
    1. 路径(Path): 从一个顶点到另一个顶点的顶点序列，相邻顶点间都有边连接
    2. 路径长度(Path Length): 路径中边的数量
    3. 简单路径(Simple Path): 除起点和终点外，不重复经过任何顶点的路径
    4. 环/循环(Cycle): 起点和终点相同的路径
    5. 自环(Loop): 连接顶点到自身的边
    */
    cout << "路径: 顶点序列 v1 → v2 → ... → vn" << endl;
    cout << "环: 起点和终点相同的路径" << endl;
    
    cout << "\n--- 图的连通性(Connectivity) ---" << endl;
    
    /*
    连通性是图论中的重要概念，描述顶点之间的可达性关系
    
    无向图的连通性:
    1. 连通(Connected): 两个顶点间存在路径
    2. 连通图: 任意两个顶点间都存在路径
    3. 连通分量(Connected Component): 最大连通子图
    4. 不连通图: 存在至少两个顶点间没有路径
    */
    cout << "无向图连通: 任意两顶点间存在路径" << endl;
    
    /*
    有向图的连通性:
    1. 强连通(Strongly Connected): 任意两个顶点间都存在双向路径
       - 从每个顶点都能到达其他所有顶点
       - 强连通分量: 最大强连通子图
    
    2. 弱连通(Weakly Connected): 将所有有向边看作无向边后图连通
       - 不是强连通，但底层无向图连通
       - 存在某些顶点间只有单向路径
    
    3. 不连通(Disconnected): 存在顶点间没有路径的情况
    */
    cout << "强连通: A ↔ B ↔ C (任意两点双向可达)" << endl;
    cout << "弱连通: A → B → C (单向可达，底层连通)" << endl;
    
    /*
    实际例子:
    强连通图: A → B → C → A (形成环，任意点可达其他所有点)
    弱连通图: A → B → C (链式结构，A能到C，但C不能到A)
    */
    
    cout << "\n--- 图的边数分析(Edge Count Analysis) ---" << endl;
    
    /*
    对于n个顶点的图，边数的数学关系:
    
    无向图(Undirected Graph):
    - 最少边数: 0 (所有顶点孤立，不连通)
    - 连通最少边数: n-1 (树结构，最小连通图)
    - 最多边数: n(n-1)/2 (完全图，每对顶点间都有边)
      计算原理: 每个顶点可连接其他n-1个顶点，总共n个顶点
               n×(n-1)，但每条边被计算两次，所以除以2
    */
    cout << "无向图 - n个顶点:" << endl;
    cout << "  最少边数: 0 (孤立点)" << endl;
    cout << "  连通最少: n-1 (树)" << endl; 
    cout << "  最多边数: n(n-1)/2 (完全图)" << endl;
    
    /*
    有向图(Directed Graph):
    - 最少弧数: 0 (所有顶点孤立)
    - 强连通最少弧数: n (环结构，每个顶点出度为1)
    - 最多弧数: n(n-1) (完全有向图，每对顶点间都有双向弧)
      计算原理: 每个顶点可向其他n-1个顶点发出弧，总共n个顶点
               不需要除以2，因为<u,v>和<v,u>是不同的弧
    */
    cout << "\n有向图 - n个顶点:" << endl;
    cout << "  最少弧数: 0 (孤立点)" << endl;
    cout << "  强连通最少: n (环)" << endl;
    cout << "  最多弧数: n(n-1) (完全有向图)" << endl;
    
    /*
    实际应用示例:
    - 社交网络: 好友关系(无向)，关注关系(有向)
    - 交通网络: 双向道路(无向)，单行道(有向)
    - 依赖关系: 任务依赖(有向)，互相依赖(可能有环)
    */
    cout << "\n图论在计算机科学中的应用:" << endl;
    cout << "- 网络路由、社交网络分析" << endl;
    cout << "- 任务调度、依赖关系管理" << endl;
    cout << "- 数据结构设计、算法优化" << endl;
    
    return 0;
}
