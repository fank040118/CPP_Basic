#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main(){
    // 泛型编程Genertic Programming——————————————————————————————————————
    // 泛型编程是一种 编程风格，其中算法是以 待指定类型 编写的
    // 这些类型在需要时被 实例化Instantiated
    // 实例化的过程中提供特定类型作为参数
    // 在 C++ 中，这种 软件实体 被称为 模板Template

    // 模板Template———————————————————————————————————————————————————————
    // C++ 使用关键字 template 来提供 参数多态性Parametric Polymorphism
    // 模板允许同一段代码用于不同类型，其中类型作为代码体的参数
    // 这是泛型编程的一种形式
    // 它使同一个代码能够被重用，且保证安全性
    // 模板分为几种类型：
    // 函数模板Function Template，它是特殊函数，用于操作泛型类型
    // 类模板Class Templates，它用于一个类可以拥有使用模板参数作为类型的成员
    // 模板参数Template parameter，这是一种可以用来传递类型作为参数的参数

    return 0;
}